class LowPassFilter{constructor(t){this.setAlpha(t),this.y=null,this.s=null}setAlpha(t){if(t<=0||t>1)throw new Error;this.alpha=t}filter(t,s,i){let h;return i&&this.setAlpha(i),h=this.y?this.alpha*t+(1-this.alpha)*this.s:t,this.y=t,this.s=h,h}lastValue(){return this.y}}class OneEuroFilter{constructor(t,s=1,i=0,h=1){if(t<=0||s<=0||h<=0)throw new Error;this.freq=t,this.minCutOff=s,this.beta=i,this.dCutOff=h,this.x=new LowPassFilter(this.alpha(this.minCutOff)),this.dx=new LowPassFilter(this.alpha(this.dCutOff)),this.lasttime=null}alpha(t){const s=1/this.freq;return 1/(1+1/(2*Math.PI*t)/s)}filter(t,s=null){this.lasttime&&s&&(this.freq=1/(s-this.lasttime)),this.lasttime=s;const i=this.x.lastValue(),h=i?(t-i)*this.freq:0,l=this.dx.filter(h,s,this.alpha(this.dCutOff)),a=this.minCutOff+this.beta*Math.abs(l);return this.x.filter(t,s,this.alpha(a))}}